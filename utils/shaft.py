# shaft_model.py
import numpy as np

class ShaftModel:
    """
    Class for modeling shaft behavior.
    """

    @staticmethod
    def calculate_angular_acceleration(trq_compressor, trq_turbine, trq_other, I):
        """
        Calculate the angular acceleration of the shaft.

        Parameters:
        - trq_compressor (float): Torque generated by the compressor.
        - trq_turbine (float): Torque generated by the turbine.
        - trq_other (float): Torque generated by other components.
        - I (float): Shaft inertia.

        Returns:
        - float: Angular acceleration of the shaft.
        """
        numerator = trq_compressor + trq_turbine + trq_other
        denominator = 2 * np.pi * I
        angular_acceleration = numerator / denominator
        return angular_acceleration

    @staticmethod
    def calculate_angular_velocity(N):
        """
        Calculate the angular velocity of the shaft in radians per second.

        Parameters:
        - N (float): Shaft speed in RPM.

        Returns:
        - float: Angular velocity of the shaft in radians per second.
        """
        return 2 * np.pi * N / 60  # RPM to radians per second

    @staticmethod
    def integrate_angular_acceleration(angular_acceleration, dt):
        """
        Integrate angular acceleration over time to calculate change in angular velocity.

        Parameters:
        - angular_acceleration (float): Angular acceleration of the shaft.
        - dt (float): Time step for integration.

        Returns:
        - float: Change in angular velocity of the shaft.
        """
        return angular_acceleration * dt
